package de.pianomanu.asterania.utils.perlin;

import com.badlogic.gdx.math.Vector3;

/**
 * This class holds the implementation of the Perlin-Noise algorithm, partly
 * taken from https://rosettacode.org/wiki/Perlin_noise#Java .
 *
 * @author Manuel Jirsak
 * @version 1.0
 */
public class PerlinNoiseAlgorithm {

    /**
     * Copy of the {@link #permutation} array, but twice as big to prevent both
     * overflow and underflow. This array is filled via static initializer.
     */
    private static final int[] p = new int[512];
    /**
     * Permutation array containing all numbers from 0 to 255 in random order.
     * Copied from https://rosettacode.org/wiki/Perlin_noise#Java .
     */
    private static final int[] permutation = {151, 160, 137, 91, 90, 15,
            131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
            190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
            88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
            77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
            102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
            135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
            5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
            223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
            129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
            251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
            49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
            138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
    };

    static {
        for (int i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i];
    }

    /**
     * Calls {@link #createPerlinNoise(float, float, float)} by dividing the
     * integer input values by 100. The reason for that is, the function
     * {@link RandomCSVGeneration#main()} uses a Random Number Generator
     * generating integer values between 0 and 100, but the Perlin-Noise
     * algorithm needs floating point inputs.
     *
     * @param x the current x value in the equidistant mesh.
     * @param y the current y value in the equidistant mesh.
     * @param z the value generated by the Random Number Generator.
     * @return a pseudorandom generated 3D floating-point vector.
     */
    public static Vector3 createPerlinNoise(int x, int y, float z) {
        return createPerlinNoise(x / 30f, y / 30f, z / 100f);
    }

    //small div: fewer distance between patches, less scattering,
    //large div: greater distance between patches, more scattering
    public static Vector3 createPerlinNoise(int x, int y, float z, float div) {
        return createPerlinNoise(x / div, y / div, z / 100f);
    }

    /**
     * Calculates a pseudorandom 3D floating-point vector using the Perlin-
     * Noise algorithm. Only the z coordinate of the output vector is needed.
     *
     * @param x x value of the input vector.
     * @param y y value of the input vector.
     * @param z z value of the input vector.
     * @return Calculates a pseudorandom 3D floating-point vector.
     */
    public static Vector3 createPerlinNoise(float x, float y, float z) {
        Vector3 result = new Vector3(x, y, z);
        /*
        First, the lower bounds of the unit cube, that contains the input
        vector, are sought by rounding down the input values
         */
        int xUnitCube = (int) Math.floor(x) & 255;
        int yUnitCube = (int) Math.floor(y) & 255;
        int zUnitCube = (int) Math.floor(z) & 255;
        /*
        Then the relative coordinates of the point inside the found unit cube
        are calculated
         */
        x -= Math.floor(x);
        y -= Math.floor(y);
        z -= Math.floor(z);
        /*
        Next step is the calculation of the fade curves, that are needed for
        the smooth gradient transitions
         */
        float xFade = fade(x);
        float yFade = fade(y);
        float zFade = fade(z);
        /*
        Calculate 6 hash functions by using the extended permutation array
         */
        int A = p[xUnitCube] + yUnitCube;
        int AA = p[A] + zUnitCube;
        int AB = p[A + 1] + zUnitCube;
        int B = p[xUnitCube + 1] + yUnitCube;
        int BA = p[B] + zUnitCube;
        int BB = p[B + 1] + zUnitCube;

        /*
        The output: calling the linear interpolation function for every
        dimension x, y and z for all 8 corners of the unit cube to blend the
        results of the gradient()-function
         */
        result.z = l(zFade, l(yFade, l(xFade, gradient(p[AA], x, y, z),
                                gradient(p[BA], x - 1, y, z)),
                        l(xFade, gradient(p[AB], x, y - 1, z),
                                gradient(p[BB], x - 1, y - 1, z))),
                l(yFade, l(xFade, gradient(p[AA + 1], x, y, z - 1),
                                gradient(p[BA + 1], x - 1, y, z - 1)),
                        l(xFade, gradient(p[AB + 1], x, y - 1, z - 1),
                                gradient(p[BB + 1], x - 1, y - 1, z - 1))));

        return result;
    }

    /**
     * Makes the input "fade" by multiplying it by itself. Copied and adjusted
     * from https://rosettacode.org/wiki/Perlin_noise#Java .
     *
     * @param t the input that should fade.
     * @return the faded input.
     */
    private static float fade(float t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
        //return t * t* t* t* t* t*t*t* (t * (t * 6 - 15) + 10);
    }

    /**
     * Calls the {@link #smoothLinearInterpolation}. This is just to clean up
     * the {@link #createPerlinNoise} function, since the long word would make
     * the code hard to read, hence the short "l(...)".
     *
     * @param x     input value to find the interpolated value to.
     * @param lower lower bound.
     * @param upper upper bound.
     * @return smooth interpolated value between the given bounds.
     */
    private static float l(float x, float lower, float upper) {
        return smoothLinearInterpolation(x, lower, upper);
    }

    /**
     * Calculates a smooth interpolated value by fading the input value (hence
     * the calculation looks similar to {@link #fade(float)}).
     *
     * @param x     input value to find the interpolated value to.
     * @param lower lower bound.
     * @param upper upper bound.
     * @return smooth interpolated value between the given bounds.
     */
    private static float smoothLinearInterpolation(float x, float lower, float upper) {
        return (upper - lower) * ((x * (x * 6 - 15) + 10) * x * x * x) + lower;
    }

    /**
     * Calculates the gradient from hash value and an input vector. This
     * function again is copied and adjusted for my needs from
     * https://rosettacode.org/wiki/Perlin_noise#Java .
     *
     * @param hash hash value calculated from the extended permutation array.
     * @param x    x value of the input vector.
     * @param y    y value of the input vector.
     * @param z    z value of the input vector.
     * @return gradient of the input vector using the hash value.
     */
    private static float gradient(int hash, float x, float y, float z) {
        /*
        Hash code represents 8 bit value, here the lowest 4 bits are needed
         */
        int lowest4bitsOfHash = hash & 15;
        float u;
        float v;
        if (lowest4bitsOfHash < 8)
            u = x;
        else
            u = y;
        if (lowest4bitsOfHash < 4)
            v = y;
        else {
            if (lowest4bitsOfHash == 12 || lowest4bitsOfHash == 14)
                v = x;
            else
                v = z;
        }
        /*
        For the final result, the lowest and second-lowest bits are needed to
        determine the sign of u and v
         */
        int lowestBitOfHash = lowest4bitsOfHash & 1;
        int secondLowestBitOfHash = lowest4bitsOfHash & 2;
        float result;
        if (lowestBitOfHash == 0)
            result = u;
        else
            result = -u;
        if (secondLowestBitOfHash == 0)
            result += v;
        else
            result -= v;
        return result;

    }
}

